Outline of the build algorithm.

Build files can be loaded at any point during the build. This means that the
build has to support the graph being updated on-the-fly during task execution.

Some implications are:
- a task that's being added to the graph can't depend on any of the current task's parents

`include`s processed during execution are folded in to the main graph where
appropriate. Since this can only happen during the resolution of a `task` action, 
they'll be connected in by default with the execution of `task`.

---

Tasks in the graph are instances of a TaskRef. This has the name of the task,
the task implementation, and task argument mappings (dependencies). Since the
task might be encountered as a dependency before the implementation is found,
both the implementation and arguments may be optional. If both are missing, it
means the task hasn't been loaded; if just the implementation is missing, it
means the task_def hasn't been loaded.

Reference tasks (those whose name arguments are translated to an object) have
their name munged to canonicalize the path, then have the task type prepended.
For example, file("foo/../bar.txt") would turn into "file:bar.txt".

In addition to the graph, there's a mapping from (canonical) names to the task
implementations.

---

Another possible algorithm! This special-cases include(), task_def(), and task references, but
produces a much saner algorithm.

phase 1 - generate a list of buildfiles to include from target name(s)

loadBuildfiles(
  files: Seq[Path],
   existingBuild: Option[BuildFile]
): BuildFile(tasks: Seq[FlatTask], loaded: Set[Include], includes: Set[Include], taskDefs: Map[String, FlatTask])
  phase 2 - load buildfiles into list of tasks. map canonical name to flat task. separate include
    tasks from others. note task_def tasks into list. strip includes of already-included files.
  phase 3 - register list of task_def tasks (map task name to task_def task); clear list

For targets specified:
phase 4 - trivial verification of targets: do they exist in the build?

foreach target, call validateTask:

validateTask(task: FlatTask): TaskNode
  phase 5 - is task a task ref?
    -> if yes and task is in an unloaded build file:
      loadBuildfiles(task_build_file,
        currBuild.copy(includes = includes - task_build_file)
      )
    -> replace current task with loaded version; error if not found
  phase 6 - is task type defined?
    -> if not and currBuild.includes.nonEmpty:
        loadBuildfiles(currBuild.includes, currBuild.copy(includes = Seq.empty));
        goto phase 5 (loop until resolves or error)
    -> if not and no includes, raise error
  phase 7 - argument verification - foreach argument in task:
    -> if not task (string literal with implicit type), check implementation for type
    -> goto phase 5
    -> validate argument name + type with task implementation

---

Kinds of reference tasks:

Self-contained execution:
  file() / files()
  include()
  mvn_lib()

Execution depends on another task's definition:
  task()


Kinds of file URIs (paths):
- file
- github
- http
- mvn? if possible.

---

Task API

// Type for implicit conversions.
nameType: ArgumentType
// Types for implicit conversions.
argumentTypes: Map[String, ArgumentType]
allowUnknownArugments: Boolean
isSkippable: Boolean
// TODO: Working dir?
execute(name: Argument, arguments: String[Argument], previousOutput: Stuff)
